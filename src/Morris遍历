Morris遍历

## 1. 算法介绍

**解决的问题**

* 传统的二叉树遍历（前序、中序、后序）要么用递归（消耗栈空间），要么显式用栈；Morris 遍历则 **不借助任何额外数据结构**（O(1) 额外空间），在原树上临时“打线索”，完成遍历。

**优秀之处**

* **空间 O(1)：** 只在叶子节点的右指针上做临时修改，不用栈也不用递归。
* **时间 O(n)：** 每条左边缘最多被访问两次（第一次打线索，第二次拆线索），故线性。

**核心思想与本质**

假设来到当前节点cur， 开始时cur来到头节点位置
1. 如果cur没有左孩子，cur向右移动（cur = cur.right）
2. 如果cur有左孩子，找到左子树上最右的节点mostRight：
   a. 如果mostRight的右指针指向空，让其指向cur，然后cur向左移动（cur = cur.left）
   b. 如果mostRight的右指针指向cur， 让其指向null，然后cur向右移动（cur = cur.right）
3. cur为空时遍历停止

任意节点若有左子树则必到两次！否则到一次！


**时间复杂度**

* 每个节点的左子树上最右节点的寻找最多两次，总操作数 \~2n → O(n)。
* 栈空间消耗 O(1)。

---

## 2. 数据结构解析

```java
public static class Node {
    public int value;
    Node left;
    Node right;
    public Node(int data) { this.value = data; }
}
```

* **value**：节点存储的值。
* **left/right**：标准二叉树指针。
* Morris 遍历在这两个指针上临时改写（仅把某个子树最右节点的 `right` 暂时指向祖先节点），遍历结束后恢复结构。

---

## 3. 核心步骤代码解析

以通用 `morris(Node head)` 为例：

```java
Node cur = head;
Node mostRight = null;
while (cur != null) {
    mostRight = cur.left;
    if (mostRight != null) {
        // 找到左子树最右节点
        while (mostRight.right != null && mostRight.right != cur) {
            mostRight = mostRight.right;
        }
        if (mostRight.right == null) {
            // 第一次到达：打线索指回 cur
            mostRight.right = cur;
            cur = cur.left;
            continue;
        } else {
            // 第二次回到 cur：拆线索
            mostRight.right = null;
        }
    }
    // 无左子树时，或拆完线索后的统一后续
    cur = cur.right;
}
```

* **寻找最右节点**：确保你不陷入死循环：`mostRight.right != cur`。
* **打线索**：`mostRight.right = cur; cur = cur.left; continue;` 立即进入左子树。
* **拆线索**：在回溯时把原 `right` 指针清空，恢复树结构。

各遍历变种（前、中、后序）就在合适位置加入或延迟“访问”：

* **前序 (`morrisPre`)**：在首次打线索时打印 `cur.value`；若 `mostRight` 为空（无左子），直接打印。
* **中序 (`morrisIn`)**：只在“无左子”或“拆线索”时打印。
* **后序 (`morrisPos`)**：在“拆线索”时，处理左子树右边缘（`printEdge(cur.left)`），最后全树右边缘 `printEdge(head)`。

辅助函数：

* `reverseEdge(Node from)`：反转从 `from` 沿右指针的单链，返回原尾节点。
* `printEdge(Node head)`：先 `reverseEdge(head)`，顺序打印，再再 `reverseEdge` 恢复。

---

## 4. 设计与代码技巧亮点

1. **线索化二叉树**：用右指针临时“回链”，无需额外空间。
2. **双向访问控制**：通过两次遇到同一个节点——一次打线索、一次拆线索——来定位前/中/后序的“访问时机”。
3. **后序巧用边缘反转**：不用栈、直接反转链表打印再复原，完美 O(1) 空间。
4. **`continue` 提前控制流程**：打线索后不必写多余层次判断。
5. **打印树形结构 (`printTree`)**：递归先右后左，中间填空格对齐，直观展示。

---

## 5. 完整代码（已加详尽注释）

```java
package class30;

public class Code01_MorrisTraversal {

    // 二叉树节点
    public static class Node {
        public int value;
        Node left, right;
        public Node(int data) { this.value = data; }
    }

    // 通用 Morris 遍历框架（不打印，仅演示线索逻辑）
    public static void morris(Node head) {
        if (head == null) return;
        Node cur = head;
        Node mostRight;
        while (cur != null) {
            mostRight = cur.left;
            if (mostRight != null) {
                // 1. 找左子树最右节点
                while (mostRight.right != null && mostRight.right != cur) {
                    mostRight = mostRight.right;
                }
                if (mostRight.right == null) {
                    // 2. 第一次到达，打线索指回 cur
                    mostRight.right = cur;
                    cur = cur.left;
                    continue;
                } else {
                    // 3. 第二次到达，拆线索
                    mostRight.right = null;
                }
            }
            // 若无左子树，或拆完线索后的统一后移
            cur = cur.right;
        }
    }

    // 前序 Morris
    public static void morrisPre(Node head) {
        if (head == null) return;
        Node cur = head, mostRight;
        while (cur != null) {
            mostRight = cur.left;
            if (mostRight != null) {
                // 找到最右
                while (mostRight.right != null && mostRight.right != cur) {
                    mostRight = mostRight.right;
                }
                if (mostRight.right == null) {
                    // 首次到达时“访问”
                    System.out.print(cur.value + " ");
                    mostRight.right = cur;
                    cur = cur.left;
                    continue;
                } else {
                    // 拆线索，不访问
                    mostRight.right = null;
                }
            } else {
                // 无左子树，直接访问
                System.out.print(cur.value + " ");
            }
            cur = cur.right;
        }
        System.out.println();
    }

    // 中序 Morris
    public static void morrisIn(Node head) {
        if (head == null) return;
        Node cur = head, mostRight;
        while (cur != null) {
            mostRight = cur.left;
            if (mostRight != null) {
                while (mostRight.right != null && mostRight.right != cur) {
                    mostRight = mostRight.right;
                }
                if (mostRight.right == null) {
                    mostRight.right = cur;
                    cur = cur.left;
                    continue;
                } else {
                    mostRight.right = null;
                }
            }
            // 访问时机：无左子 或 拆线索后
            System.out.print(cur.value + " ");
            cur = cur.right;
        }
        System.out.println();
    }

    // 后序 Morris
    public static void morrisPos(Node head) {
        if (head == null) return;
        Node cur = head, mostRight;
        while (cur != null) {
            mostRight = cur.left;
            if (mostRight != null) {
                while (mostRight.right != null && mostRight.right != cur) {
                    mostRight = mostRight.right;
                }
                if (mostRight.right == null) {
                    mostRight.right = cur;
                    cur = cur.left;
                    continue;
                } else {
                    mostRight.right = null;
                    // 拆线索时，打印左子树右边缘
                    printEdge(cur.left);
                }
            }
            cur = cur.right;
        }
        // 最后打印整棵树的右边缘
        printEdge(head);
        System.out.println();
    }

    // 反转并打印从 head 沿 right 指针的链，然后复原
    public static void printEdge(Node head) {
        Node tail = reverseEdge(head);
        Node cur = tail;
        while (cur != null) {
            System.out.print(cur.value + " ");
            cur = cur.right;
        }
        reverseEdge(tail);
    }

    // 原地反转链表（right 方向），返回新的头节点
    public static Node reverseEdge(Node from) {
        Node prev = null, next;
        while (from != null) {
            next = from.right;
            from.right = prev;
            prev = from;
            from = next;
        }
        return prev;
    }

    // 打印二叉树结构，便于测试
    public static void printTree(Node head) {
        System.out.println("Binary Tree:");
        printInOrder(head, 0, "H", 17);
        System.out.println();
    }
    private static void printInOrder(Node head, int h, String to, int len) {
        if (head == null) return;
        printInOrder(head.right, h+1, "v", len);
        String val = to + head.value + to;
        int L = (len - val.length())/2;
        int R = len - val.length() - L;
        System.out.println(" ".repeat(h*len) + " ".repeat(L) + val + " ".repeat(R));
        printInOrder(head.left, h+1, "^", len);
    }

    // 测试：是否 BST（中序监测有序性）
    public static boolean isBST(Node head) {
        if (head == null) return true;
        Node cur = head, mostRight;
        Integer prev = null;
        boolean ans = true;
        while (cur != null) {
            mostRight = cur.left;
            if (mostRight != null) {
                while (mostRight.right != null && mostRight.right != cur) {
                    mostRight = mostRight.right;
                }
                if (mostRight.right == null) {
                    mostRight.right = cur;
                    cur = cur.left;
                    continue;
                } else {
                    mostRight.right = null;
                }
            }
            // 中序访问时比对
            if (prev != null && prev >= cur.value) {
                ans = false;
            }
            prev = cur.value;
            cur = cur.right;
        }
        return ans;
    }

    public static void main(String[] args) {
        Node head = new Node(4);
        head.left = new Node(2); head.right = new Node(6);
        head.left.left = new Node(1); head.left.right = new Node(3);
        head.right.left = new Node(5); head.right.right = new Node(7);

        printTree(head);
        morrisIn(head);   // 中序
        morrisPre(head);  // 前序
        morrisPos(head);  // 后序
        printTree(head);
    }
}
```

---

## 6. 简易示例演示

以下树为例：

```
    2
   / \
  1   3
```

* **中序**：

  1. cur=2，有左子；mostRight=1，1.right=null→打线索→cur=1
  2. cur=1，无左→打印 1 →cur=1.right→回到 2（因线索）
  3. 拆线索，打印 2 →cur=2.right→3
  4. cur=3，无左→打印 3 →结束
* 输出：`1 2 3`

---

## 7. 应用的经典题目

* **中序遍历输出**（如判断 BST、有序输出）
* **前序遍历**（如序列化/反序列化模板）
* **后序遍历**（如删除树、计算子树信息）
* **验证二叉搜索树**（`isBST` 已示例）
* **找第 k 小/大 元素**（配合计数或直接中序第 k 次“访问”时返回）
* **树转链表**（可在线程化过程中断开、链接）

---

## 8. 记忆要点提炼

1. **三种时机**

   * 无左子 → 访问 → 右
   * 打线索（第一次遇到） → 进入左
   * 拆线索（第二次遇到） → 访问（中序/后序特定） → 右
2. **前／中／后顺序差别**

   * 前序：第一次遇 `cur` 时打印
   * 中序：拆线索或无左子时打印
   * 后序：拆线索时打印左子树右边缘，最后打印整树右边缘
3. **后序特技**

   * `reverseEdge` + `printEdge`：反转链表打印再复原
4. **时间 O(n)，空间 O(1)**
5. **线索化** = 栈的“回链”
6. **关键变量**：`cur`（当前）、`mostRight`（左子树前驱）

可以把这 6 点串成口决：

> “找最右，打线索；无左/拆线索时访问；后序边缘反转打印”

---

到这里，已覆盖 1–8 条全部内容。如需更深入示例、练习题或记忆卡片，可在下次继续！

