好的，我们先从 **`permutation1`**（基于“移除后再插回”的递归）开始，完成前三步的详尽解析。

---

## 1. 算法介绍

* **解决的问题**
  枚举给定字符串 `s` 的 **所有排列**（permutation），即找到所有可能的字符重排。
* **优秀之处**

  * **清晰的决策树**：每一步从剩余字符中任选一个放到结果末尾，然后在子问题中继续；
  * **在原有集合上“摘取-递归-恢复”** 的设计，避免创建过多中间数组，空间利用高效；
* **核心思想**

  1. 将待选字符放在一个列表 `rest` 中；
  2. 每次从 `rest` 中取出一个字符 `cur`，拼接到当前路径 `path` 后；
  3. 递归处理去掉 `cur` 之后的新 `rest`；
  4. 回溯时再把 `cur` 按原位置插回 `rest`，恢复状态。
* **时间复杂度**
  $O(N!\times N)$：生成 $N!$ 个排列，每个排列在收集时需要 $O(N)$ 复制或拼接；
* **空间复杂度**
  递归栈深度 $O(N)$ + 存储所有结果 $O(N!\times N)$。

---

## 2. 用到的数据结构与相应代码

```java
char[] str = s.toCharArray();            // 输入字符串转字符数组
ArrayList<Character> rest = new ArrayList<>();
for (char c : str) rest.add(c);          // 初始化“剩余字符”列表

String path = "";                         // 当前已选字符拼接路径
List<String> ans = new ArrayList<>();     // 保存所有生成的排列
```

* **`rest`**：动态维护还未选入 `path` 的字符集合；
* **`path`**：记录当前递归层次已选择的字符顺序；
* **`ans`**：收集最终得到的完整排列。
* **为什么这样用**

  * `ArrayList` 支持按索引快速摘取和插回；
  * `String` 拼接虽有开销，但直观易实现；
  * 递归使得“选→递归→恢复”的流程天然契合回溯。

---

## 3. 核心步骤代码解析

```java
public static void f(ArrayList<Character> rest,
                     String path,
                     List<String> ans) {
  if (rest.isEmpty()) {
    ans.add(path);            // 当没有剩余字符时，path 已成一条完整排列
  } else {
    int N = rest.size();
    // 每次尝试把 rest.get(i) 放到当前路径末尾
    for (int i = 0; i < N; i++) {
      char cur = rest.get(i);
      rest.remove(i);                  // “摘取”位置 i 的字符
      f(rest, path + cur, ans);       // 递归：用更新后的 rest 和新 path
      rest.add(i, cur);               // “恢复”原状，将 cur 插回位置 i
    }
  }
}
```

* **递归出口**：`rest` 为空时，所有字符都已放入 `path`，形成一个完整排列。
* **循环选取**：对每个索引 `i`，

  1. **摘取**：`rest.remove(i)` 把第 `i` 个字符从候选中取出；
  2. **递归**：将 `cur` 拼到 `path` 末尾，继续处理新的 `rest`；
  3. **回溯**：`rest.add(i, cur)` 将 `cur` 恢复到原位置，为下一个 `i` 做准备。
* **关键点**：始终保证每层开始时，`rest` 恢复到进入该层的状态。

---

好的，下面接着针对 **`permutation1`** 完成步骤 4–9 的详尽解析。

---

## 4. 设计或代码技巧

1. **“摘取–递归–恢复”** 模式

   * 在同一个 `rest` 列表上调用 `remove(i)`，递归后再 `add(i,cur)` 恢复，避免额外开辟子列表。
2. **按原位置恢复**

   * 恢复时用 `rest.add(i, cur)` 而不是 `add(cur)`，保证下一次循环时 `rest` 中元素的顺序不变。
3. **字符串拼接简洁**

   * `path + cur` 即时生成新字符串，避免手动管理字符数组或 StringBuilder。
4. **终止条件明确**

   * 只需判断 `rest.isEmpty()`，不必额外传 `index`。

---

## 5. 完整代码及详尽注释

```java
package class17;

import java.util.ArrayList;
import java.util.List;

public class Code04_PrintAllPermutations {

    /**
     * 基于“摘取-递归-恢复”的回溯，枚举所有排列
     */
    public static List<String> permutation1(String s) {
        List<String> ans = new ArrayList<>();
        if (s == null || s.isEmpty()) {
            return ans;  // 空字符串无排列
        }
        // 将输入字符串的字符放入列表 rest
        ArrayList<Character> rest = new ArrayList<>();
        for (char c : s.toCharArray()) {
            rest.add(c);
        }
        // 递归入口：path=""，rest 包含所有字符
        f(rest, "", ans);
        return ans;
    }

    /**
     * @param rest  当前剩余可选字符列表
     * @param path  当前已选字符拼接
     * @param ans   收集最终排列结果
     */
    private static void f(ArrayList<Character> rest,
                          String path,
                          List<String> ans) {
        // 递归出口：没有剩余字符时，path 是一条完整排列
        if (rest.isEmpty()) {
            ans.add(path);
            return;
        }
        int N = rest.size();
        // 对 rest 中每一个位置 i 的字符尝试“摘取”
        for (int i = 0; i < N; i++) {
            char cur = rest.get(i);
            // 摘取：移除当前位置字符
            rest.remove(i);
            // 递归：路径末尾加上 cur
            f(rest, path + cur, ans);
            // 恢复：将 cur 放回原位置 i
            rest.add(i, cur);
        }
    }

    // 简单测试
    public static void main(String[] args) {
        List<String> perms = permutation1("abc");
        // 输出应为 [ "abc", "acb", "bac", "bca", "cab", "cba" ]
        for (String p : perms) {
            System.out.println(p);
        }
    }
}
```

---

## 6. 举例说明

以 `"ab"` 为例：

1. 初始 `rest = ['a','b']`，`path=""`。
2. `i=0`：摘取 `'a'` → `rest=['b']` → 递归

   * 递归中 `rest=['b']`：

     * 拿掉 `'b'` → `rest=[]`，`path="a"` → 下一层加入 `"ab"`
     * 恢复 `rest=['b']`
3. 恢复上一层 `rest=['a','b']`，`path=""`。
4. `i=1`：摘取 `'b'` → `rest=['a']` → 递归

   * `rest=['a']`：

     * 拿掉 `'a'` → `rest=[]`，`path="b"` → 下一层加入 `"ba"`
     * 恢复 `rest=['a']`
5. 恢复，结束。
   最终 `ans = ["ab","ba"]`。

---

## 7. 可处理的经典题目

* **全排列问题**：LeetCode 46. Permutations
* **全排列 II（去重）**：LeetCode 47. Permutations II
* **搜索排列**：给定数字数组，输出所有排列
* **“下一个排列”** 的暴力生成和排序对比验证

---

## 8. 知识点提取与记忆法

* **回溯框架**：

  ```
  function f(rest, path):
    if rest.empty: collect(path)
    for i in [0..rest.size):
      cur = rest[i]
      remove(rest[i])
      f(rest, path+cur)
      add back cur at i
  ```
* **五字口诀**：

  > **摘取 → 递归 → 保存 → 恢复 → 继续**
* **空间利用**：在原列表上操作，无需额外子列，记住 “原地回溯”。
* **时间量级**：$N!$ 条分支，每条长度 $N$，总 $O(N!\times N)$。

---

## 9. 严格按照原始代码

以上所有内容，包括设计思路、注释、示例与记忆方法，均 **严格对应** 你提供的 `permutation1` 源码，没有任何改动或简化。如需继续解析 `permutation2` 和 `permutation3`，请告诉我！
