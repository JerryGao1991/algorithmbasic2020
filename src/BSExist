下面我严格按照你提供的 **Code04\_BSExist** 源码，分 **1–9** 步做详尽解析，帮助你从算法本质到记忆窍门全方位掌握二分查找“是否存在”这一经典操作。

---

## 1. 算法介绍

* **解决的问题**
  在一个 **升序** 数组 `sortedArr` 中，判断目标值 `num` 是否存在。

* **优秀之处**

  * **时间复杂度** $O(\log N)$：对半划分，远优于线性扫 $O(N)$；
  * **空间复杂度** O(1)：仅用几个指针，无额外数组。

* **核心思想与本质**

  1. **双指针边界**：维护区间 $[L, R]$，不断将区间对半折叠；
  2. **中点比较**：取中点 `mid = L + ((R - L) >> 1)`，比较 `sortedArr[mid]` 与 `num`；

     * 若相等 → 立即返回 `true`；
     * 若大于 → 在左半区 $[L, mid-1]$ 继续；
     * 若小于 → 在右半区 $[mid+1, R]$ 继续；
  3. **终止条件**：当区间缩小到只剩一个元素 $[L == R]$，再做一次判断。

---

## 2. 用到的数据结构与相应代码

```java
int L = 0;                         // 左边界，数组首索引
int R = sortedArr.length - 1;     // 右边界，数组末索引
int mid;                          // 中点索引
```

* **数组**：已排序的 `int[] sortedArr`；
* **三变量**：`L, R` 界定当前搜索区间；`mid` 存储区间中点。
* **为何这样用**：

  * `L,R` 明确告诉我们“当前要查找的区间”；
  * `mid` 刚好将区间对半，分割下一轮搜索。

---

## 3. 核心步骤代码解析

```java
while (L < R) {                              // 当区间至少有 2 个元素
    mid = L + ((R - L) >> 1);                // 避免溢出的中点计算
    if (sortedArr[mid] == num) {
        return true;                         // 找到直接返回
    } else if (sortedArr[mid] > num) {
        R = mid - 1;                         // 缩到左半区
    } else {
        L = mid + 1;                         // 缩到右半区
    }
}
// L == R 时只剩一个元素，最后再比一次
return sortedArr[L] == num;
```

* **`while (L < R)`**：只在区间长度 ≥2 时二分，避免死循环；
* **`mid = L + ((R-L)>>1)`**：比 `(L+R)/2` 安全，防止整数溢出；
* **分支判断**：根据 `sortedArr[mid]` 与 `num` 的大小关系调整边界；
* **循环外判断**：当 `L == R`，区间剩一个位置，再做一次相等性检查。

---

## 4. 设计或逻辑/代码技巧

1. **区间条件 `L < R`**
   保证循环内 `mid` 与 `L,R` 始终有效，避免无限循环或遗漏单点。
2. **中点写法**
   `L + ((R-L) >> 1)` 防止 `(L+R)` 超过 `int` 上限。
3. **退出后再判**
   将单元素判断放到循环外，统一处理最后一位，代码结构清晰。
4. **快速返回**
   一旦 `sortedArr[mid] == num` 馃决，不必继续折半。

---

## 5. 完整代码 & 详尽注释

```java
package class01;

import java.util.Arrays;

public class Code04_BSExist {

    /**
     * 在升序数组 sortedArr 中，判断 num 是否存在
     * @param sortedArr 已排序的数组（升序）
     * @param num       要查找的目标值
     * @return true 如果存在，否则 false
     */
    public static boolean exist(int[] sortedArr, int num) {
        // 1) 边界检查：空数组或 null 直接返回 false
        if (sortedArr == null || sortedArr.length == 0) {
            return false;
        }
        // 2) 初始化双指针区间
        int L = 0;
        int R = sortedArr.length - 1;
        int mid = 0;
        // 3) 当区间长度 >= 2 时，继续二分
        while (L < R) { 
            // 3.1) 计算中点，避免溢出
            mid = L + ((R - L) >> 1);
            // 3.2) 三种情况
            if (sortedArr[mid] == num) {
                return true;            // 找到目标，直接返回
            } else if (sortedArr[mid] > num) {
                R = mid - 1;            // 缩减到左半区 [L..mid-1]
            } else {
                L = mid + 1;            // 缩减到右半区 [mid+1..R]
            }
        }
        // 4) 退出时 L == R，只剩一个位置，做最后一次判断
        return sortedArr[L] == num;
    }

    // 暴力对照：线性扫描
    public static boolean test(int[] sortedArr, int num) {
        for (int cur : sortedArr) {
            if (cur == num) {
                return true;
            }
        }
        return false;
    }

    // 随机数组生成
    public static int[] generateRandomArray(int maxSize, int maxValue) {
        int len = (int) ((maxSize + 1) * Math.random());
        int[] arr = new int[len];
        for (int i = 0; i < len; i++) {
            arr[i] = (int) ((maxValue + 1) * Math.random())
                   - (int) (maxValue * Math.random());
        }
        return arr;
    }

    public static void main(String[] args) {
        int testTime = 500000, maxSize = 10, maxValue = 100;
        boolean succeed = true;
        for (int i = 0; i < testTime; i++) {
            int[] arr = generateRandomArray(maxSize, maxValue);
            Arrays.sort(arr);
            int value = (int) ((maxValue + 1) * Math.random())
                      - (int) (maxValue * Math.random());
            if (test(arr, value) != exist(arr, value)) {
                succeed = false;
                break;
            }
        }
        System.out.println(succeed ? "Nice!" : "Fucking fucked!");
    }
}
```

---

## 6. 详细示例演示

以 `sortedArr = [1, 3, 5, 7, 9]`, `num = 5` 为例：

|  轮次 |  L  |  R  | mid = L+((R-L)>>1) | sortedArr\[mid] |     比较结果    |     下一区间     |
| :-: | :-: | :-: | :----------------: | :-------------: | :---------: | :----------: |
|  初始 |  0  |  4  |   0+((4-0)>>1)=2   |        5        | == num → 找到 | —— 立即返回 true |

又如 `num = 6`：

|  轮次 |  L  |  R  |       mid      | sortedArr\[mid] |      比较     |      下一区间      |
| :-: | :-: | :-: | :------------: | :-------------: | :---------: | :------------: |
|  1  |  0  |  4  |        2       |        5        | 5<6 → R=L+? |     L=3,R=4    |
|  2  |  3  |  4  | 3+((4-3)>>1)=3 |        7        |   7>6 → 左区  | L=3,R=2→退出Loop |
|  —  |     |     |                |                 |             |   L==R? false  |

最终返回 `false`。

---

## 7. 可处理的经典题目

* **二分查找**：LeetCode 704. Binary Search
* **查找左/右边界**：LeetCode 34. Find First and Last Position of Element in Sorted Array
* **搜索旋转数组**：LeetCode 33. Search in Rotated Sorted Array
* **峰值元素**：LeetCode 162. Find Peak Element
* **有序矩阵查找**：LeetCode 240. Search a 2D Matrix II

---

## 8. 知识点提取与记忆法

1. **区间维护**：用 `[L..R]`，`while (L < R)` 保证每次能缩减至少一个点。
2. **安全中点**：`mid = L + ((R-L)>>1)`。
3. **三分支**：

   * `==` → 返回；
   * `>` → `R=mid-1`；
   * `<` → `L=mid+1`。
4. **最后判单点**：退出循环后 `L==R`，判断 `sortedArr[L] == num`。
5. **口诀**：

   > **“左中右，等退区；区只剩一，单点比一比！”**

---

## 9. 严格按照原始代码

以上所有分析、示例与记忆要点，均 **严格对应** 你提供的 `class01.Code04_BSExist` 源码，未作任何改动或简化。希望这份极致详尽的解析，能帮助你彻底掌握二分查找的每一细节！
