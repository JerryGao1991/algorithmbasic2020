下面我严格依照你给的 **Code01\_KMP** 原始实现，分 1–9 步做最详尽的解析，并在第 6 步用一个非常详细的例子演示整个匹配过程。

---

## 1. 算法介绍

* **解决的问题**
  在主串 `s1` 中查找模式串 `s2` 第一次出现的位置，等价于 `s1.indexOf(s2)`。

* **优秀之处**

  * 暴力匹配最坏 $O(N\!M)$，KMP 保证 $O(N+M)$ 线性时间；
  * 模式串指针在失配时“自己跳”，主串指针从不后退。

* **核心思想与本质**

  1. **预处理** 模式串 `s2`：计算每个位置 `i` 的 `next[i]`，即 `s2[0..i-1]` 的最长相同前后缀长度。
  2. **双指针匹配**：`x` 指主串，`y` 指模式串。匹配成功时双增，失配时根据 `next[y]` 让模式串“跳到”下一个可能的对齐位置，或在 `next[y]==-1` 时让主串 `x++`。
  3. 若 `y` 遍历完模式串，即找到一次完整匹配，返回起始下标 `x-y`；否则返回 `-1`。

* **时间复杂度**

  $$
    O(M)\quad\bigl(\text{构造 }next\bigr)\;\;+\;O(N)\quad\bigl(\text{匹配过程}\bigr)
    \;=\;O(N+M).
  $$

---

## 2. 数据结构与代码

```java
char[] str1 = s1.toCharArray();    // 主串的字符数组
char[] str2 = s2.toCharArray();    // 模式串的字符数组
int[]  next = getNextArray(str2);  // 存放每个位置的“最长相同前后缀长度”
int x = 0, y = 0;                  // x 在主串上遍历，y 在模式串上遍历
```

* **字符数组**：随机访问字符更高效。
* **Next 数组**：仅需额外 $O(M)$ 空间，即时提供“失配跳转”信息。
* **双指针**：单次扫描主串和模式串，确保线性时间。

---

## 3. 核心步骤代码解析

### 构造 Next 数组

```java
public static int[] getNextArray(char[] s) {
    int M = s.length;
    if (M == 1) return new int[]{ -1 };
    int[] next = new int[M];
    next[0] = -1;    // 约定：若 y 回到 0 还失配，让主串 x++。
    next[1] = 0;     // 长度=1 子串无真前后缀。
    int i = 2, cn = 0;
    while (i < M) {
        if (s[i-1] == s[cn]) {
            // 可以在已有前后缀基础上再扩一位
            next[i++] = ++cn;
        } else if (cn > 0) {
            // 尝试更短的前后缀
            cn = next[cn];
        } else {
            // 无可用前缀，长度置 0
            next[i++] = 0;
        }
    }
    return next;
}
```

* **`cn`** 保存当前“已匹配的前后缀长度”，回退时用 `cn = next[cn]`。
* **`next[0] = -1`** 与 **`next[1] = 0`** 的约定让匹配逻辑代码更简洁。

### 模式匹配主体

```java
public static int getIndexOf(String s1, String s2) {
    if (s1==null||s2==null||s2.length()<1||s1.length()<s2.length()) 
        return -1;
    char[] str1 = s1.toCharArray(), str2 = s2.toCharArray();
    int[] next = getNextArray(str2);
    int x = 0, y = 0;
    while (x < str1.length && y < str2.length) {
        if (str1[x] == str2[y]) {
            // 成功匹配一位
            x++; y++;
        } else if (next[y] == -1) {
            // y==0 再失配，只能主串走下一位
            x++;
        } else {
            // 模式串自己跳到 next[y]
            y = next[y];
        }
    }
    // 若 y 遍历完，说明全匹配；否则失败
    return y == str2.length ? x - y : -1;
}
```

* **匹配成功** → 双增；
* **失配** → 若 `y>0`，模式串 “跳”；否则 `x++`。
* **判定** → 最后检查 `y==M`。

---

## 4. 设计/逻辑/代码技巧

1. **统一失配逻辑**
   `next[0] = -1` 避免在匹配循环中再写 `if (y==0)`，让所有失配都走 `next[y]` 路径。
2. **局部回退，无需回溯主串**
   只让 `y` 按 `next` 缩小范围，主串指针 `x` 始终向前。
3. **一次循环搞定**
   `while (x<N && y<M)` 中处理成功与失败所有情况，代码紧凑可读。
4. **方法分离**
   `getNextArray` 专职预处理，`getIndexOf` 只关心匹配流程，清晰分工。

---

## 5. 全代码 & 详尽注释

```java
package class27;

public class Code01_KMP {

  /**
   * 在 s1 中查找 s2 第一次出现的位置，
   * 若不存在则返回 -1。严格按原始实现。
   */
  public static int getIndexOf(String s1, String s2) {
    // 1) 边界检查
    if (s1 == null || s2 == null
        || s2.length() < 1 
        || s1.length() < s2.length()) {
      return -1;
    }
    // 2) 转为字符数组
    char[] str1 = s1.toCharArray();
    char[] str2 = s2.toCharArray();
    // 3) 预处理模式串
    int[] next = getNextArray(str2);
    // 4) 双指针扫描
    int x = 0, y = 0;
    while (x < str1.length && y < str2.length) {
      if (str1[x] == str2[y]) {
        // 匹配成功，双指针同时前进
        x++;
        y++;
      } else if (next[y] == -1) {
        // 模式串 y 已退无可退，让主串 x++
        x++;
      } else {
        // 模式串自己跳到 next[y]
        y = next[y];
      }
    }
    // 5) 判断是否全匹配
    return y == str2.length 
           ? x - y       // 匹配起点
           : -1;         // 未找到
  }

  /**
   * 生成模式串的 Next 数组
   * next[i] = s2[0..i-1] 的最长相同前后缀长度
   */
  public static int[] getNextArray(char[] s) {
    int M = s.length;
    if (M == 1) {
      // 单字符时，统一返回 [-1]
      return new int[]{ -1 };
    }
    int[] next = new int[M];
    // 约定
    next[0] = -1;  
    next[1] = 0;
    int i = 2;  // 当前正在计算 next[i]
    int cn = 0; // cn = next[i-1]，表示待比较的前后缀末尾位置
    while (i < M) {
      if (s[i-1] == s[cn]) {
        // 扩展已匹配前后缀
        next[i++] = ++cn;
      } else if (cn > 0) {
        // 回退到更短的前后缀
        cn = next[cn];
      } else {
        // 无前后缀可扩展
        next[i++] = 0;
      }
    }
    return next;
  }

  // 测试辅助：生成随机字符串
  public static String getRandomString(int possibilities, int size) {
    /* … 与原代码一致 … */
    char[] ans = new char[(int)(Math.random() * size) + 1];
    for (int i = 0; i < ans.length; i++) {
      ans[i] = (char)((int)(Math.random() * possibilities) + 'a');
    }
    return String.valueOf(ans);
  }

  public static void main(String[] args) {
    /* … 与原代码一致 … */
  }
}
```

---

## 6. 详尽示例

**例子**：

* 主串 `s1 = "aaab"`
* 模式串 `s2 = "aab"`

1. **构造 Next**

   ```
   s2 = a  a  b
   idx 0  1  2
   next[0] = -1
   next[1] =  0
   i=2, cn=0: s2[1]==s2[0]? 'a'=='a' → next[2] = ++cn = 1  
   → next = [-1, 0, 1]
   ```

2. **匹配过程**

   |  迭代 |  x  |  y  | str1\[x] | str2\[y] |         比较结果        | 执行动作             | 新 x,y |
   | :-: | :-: | :-: | :------: | :------: | :-----------------: | :--------------- | :---: |
   |  1  |  0  |  0  |    'a'   |    'a'   |          相等         | x++，y++          |  1,1  |
   |  2  |  1  |  1  |    'a'   |    'a'   |          相等         | x++，y++          |  2,2  |
   |  3  |  2  |  2  |    'a'   |    'b'   |          失配         | y=next\[2]=1     |  2,1  |
   |  4  |  2  |  1  |    'a'   |    'a'   |          相等         | x++，y++          |  3,2  |
   |  5  |  3  |  2  |    'b'   |    'b'   |          相等         | x++，y++          |  4,3  |
   |  —  |  —  |  3  |     —    |     —    | y==s2.length → 匹配成功 | 返回 x–y = 4–3 = 1 |       |

最终返回 `1`，即在 `"aaab"` 中，`"aab"` 首次出现于下标 1。

---

## 7. 可解决的经典题目

* **LeetCode 28. Implement strStr()**（本题即其实现）
* **周期检测**：459. Repeated Substring Pattern
* **最长回文前缀**、**最短循环节**等利用前缀函数的变形
* **AC 自动机**：多模式串匹配底层使用 KMP 风格的 Next

---

## 8. 知识点提取与记忆法

1. **Next 数组定义**

   > `next[i]` = `s2[0..i–1]` 的最长相同前后缀长度。
2. **Next 构造口诀**

   ```
   next[0] = -1; next[1] = 0;
   for i from 2 to M-1:
     while cn>0 and s[i-1] != s[cn]: 
       cn = next[cn];
     if s[i-1] == s[cn]: 
       cn++;
     next[i] = cn;
   ```
3. **匹配流程口诀**

   ```
   x = y = 0;
   while x<N and y<M:
     if s1[x]==s2[y]: x++; y++;
     else if next[y]==-1: x++;
     else: y = next[y];
   return (y==M) ? x-y : -1;
   ```
4. **核心思路**

   > **“失配时，模式串自己跳；主串不回头。”**
5. **复杂度记忆**

   * 构造 Next：O(M)
   * KMP 匹配：O(N)
   * 合计：O(N+M)

---

## 9. 严格遵循原始代码

以上所有分析、示例与记忆要点，均 **严格依据** 你提供的 `class27.Code01_KMP` 代码，未做任何改动或简化。希望这份极致详尽的解析能帮助你彻底掌握 KMP 算法！
