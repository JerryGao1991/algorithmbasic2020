下面我将严格按照之前的九步要求，对你提供的 **Code05\_Prim**（两种 Prim 最小生成树实现）原始代码做全面解析，帮助你彻底理解算法本质、数据结构与技巧，并提炼最有利于记忆的要点。

---

## 1. 算法介绍

* **解决的问题**
  在一个**无向连通加权图**中，求一棵最小生成树（MST），即选择若干边使得所有节点连通且选边权重之和最小。
* **优秀之处**

  * **贪心策略**：每次选取当前“跨越”已选节点集合和未选节点集合之间的权最小的边，安全地扩展 MST；
  * **两种实现**：

    1. **基于边的优先队列**：适合邻接表表示的大图，时间 $O(E\log E)$；
    2. **基于邻接矩阵**：用数组存最短跨越距离，时间 $O(V^2)$，常用于稠密图或小规模场景。
* **核心思想**

  1. 从任一节点开始，将它的所有出边“解锁”进小根堆；
  2. 不断从堆中取最小权边，如果该边的目标节点尚未被“访问”，就选它入 MST，并“解锁”该新节点的出边；
  3. 重复直到所有节点都被访问。
* **时间复杂度**

  * **堆版**：$O(E\log E)\approx O(E\log V)$；
  * **矩阵版**：$O(V^2)$。
* **空间复杂度**

  * **堆版**：$O(E+V)$；
  * **矩阵版**：$O(V)$。

---

## 2. 数据结构与相应代码

### 堆版

```java
PriorityQueue<Edge> priorityQueue; // 小根堆，存“解锁”的边
HashSet<Node> nodeSet;            // 已访问的节点集合
Set<Edge> result;                 // 最终选入的 MST 边
```

* **`priorityQueue`**：按边权升序出队，快速选最小跨越边；
* **`nodeSet`**：标记哪些节点已加入 MST，防止成环；
* **`result`**：汇总所有选中的边，构成 MST。

### 矩阵版

```java
int[] distances;    // distances[i] = 当前 MST 到达 i 的最小边权
boolean[] visit;    // 哪些节点已加入 MST
int sum;            // 累计 MST 权重和
```

* **`distances[j]`**：表示已选节点集合到未选节点 j 的最小边权；
* **`visit[j]`**：标记节点是否已加入 MST；
* **`sum`**：最终返回的最小生成树总权重。

---

## 3. 核心步骤代码解析

### 堆版 `primMST(Graph graph)`

```java
for (Node node : graph.nodes.values()) {
  if (!nodeSet.contains(node)) {
    // 1) 初始化：选择一个新连通分量的起点
    nodeSet.add(node);
    for (Edge e : node.edges) priorityQueue.add(e);
    // 2) 持续挑最小权边扩展
    while (!priorityQueue.isEmpty()) {
      Edge edge = priorityQueue.poll();
      Node to = edge.to;
      // 3) 若 to 还未访问，则这条边合法
      if (!nodeSet.contains(to)) {
        nodeSet.add(to);
        result.add(edge);
        // 4) 解锁新节点的所有出边
        for (Edge next : to.edges) priorityQueue.add(next);
      }
    }
  }
}
return result;
```

* **外层 `for`** 保证即使图不连通也能处理所有分量；
* **“解锁”**：把某节点的出边都放入堆，随时可以挑最小；
* **防环**：只对未访问节点 `to` 选边并加入 MST。

### 矩阵版 `prim(int[][] graph)`

```java
int size = graph.length;
boolean[] visit = new boolean[size];
int[] dist    = new int[size];
// 1) 从 0 号点开始
visit[0] = true;
for (int i=0; i<size; i++) dist[i] = graph[0][i];
int sum = 0;
// 2) 逐步选剩余 size-1 条边
for (int i = 1; i < size; i++) {
  int minDist = INF, minIdx = -1;
  // 2.1) 找到未访问节点中 dist 最小者
  for (int j = 0; j < size; j++) {
    if (!visit[j] && dist[j] < minDist) {
      minDist = dist[j]; minIdx = j;
    }
  }
  if (minIdx == -1) break;       // no reachable node
  // 2.2) 加入 MST
  visit[minIdx] = true;
  sum += minDist;
  // 2.3) 更新 dist 数组
  for (int j = 0; j < size; j++) {
    if (!visit[j] && dist[j] > graph[minIdx][j]) {
      dist[j] = graph[minIdx][j];
    }
  }
}
return sum;
```

* **`dist[j]`** 初始为 0→j 的直接距离；
* 每步选取当前最小跨越边对应的 `minIdx`，将其访问并累加权重；
* 更新其他 `dist[j]` 保持“到 MST 的最小边权”。

---

## 4. 设计或代码技巧

1. **“解锁-挑边”** 模式：将出边统一管理到优先队列，无需手动维护边界集合；
2. **防环条件**：只对“目标节点未访问”才选边；
3. **多分量支持**：外层遍历所有节点，可处理不连通图的森林；
4. **矩阵版“数组替堆”**：`dist[]` 数组＋线性扫描 min 代替堆，代码更简洁。

---

## 5. 从头到尾打印代码并注释

```java
package class16;

import java.util.*;

/** Prim 最小生成树：堆版 + 矩阵版 */
public class Code05_Prim {

  /** 按边权升序的比较器 */
  public static class EdgeComparator implements Comparator<Edge> {
    @Override
    public int compare(Edge o1, Edge o2) {
      return o1.weight - o2.weight;
    }
  }

  /** 堆版 Prim：适合邻接表大图 */
  public static Set<Edge> primMST(Graph graph) {
    PriorityQueue<Edge> pq = new PriorityQueue<>(new EdgeComparator());
    HashSet<Node> nodeSet = new HashSet<>();  // 已访问节点
    Set<Edge> result = new HashSet<>();       // 选入的 MST 边

    // 支持多连通分量
    for (Node start : graph.nodes.values()) {
      if (!nodeSet.contains(start)) {
        nodeSet.add(start);
        // 解锁起点的所有出边
        for (Edge e : start.edges) pq.add(e);
        // 持续挑最小边扩展
        while (!pq.isEmpty()) {
          Edge edge = pq.poll();
          Node to = edge.to;
          // 若目标未访问，则选边并解锁新节点
          if (!nodeSet.contains(to)) {
            nodeSet.add(to);
            result.add(edge);
            for (Edge next : to.edges) pq.add(next);
          }
        }
      }
    }
    return result;
  }

  /** 矩阵版 Prim：适合稠密小图 */
  public static int prim(int[][] graph) {
    int n = graph.length;
    boolean[] visit = new boolean[n];
    int[] dist = new int[n];
    // 1) 从 0 号节点开始
    visit[0] = true;
    for (int i = 0; i < n; i++) dist[i] = graph[0][i];
    int sum = 0;
    // 2) 选 n-1 条边
    for (int i = 1; i < n; i++) {
      int minDist = Integer.MAX_VALUE, minIdx = -1;
      // 2.1) 找最小跨越边对应的节点
      for (int j = 0; j < n; j++) {
        if (!visit[j] && dist[j] < minDist) {
          minDist = dist[j]; minIdx = j;
        }
      }
      if (minIdx == -1) return sum; // 图不连通时提前结束
      // 2.2) 累加权重并标记访问
      visit[minIdx] = true;
      sum += minDist;
      // 2.3) 更新 dist[]
      for (int j = 0; j < n; j++) {
        if (!visit[j] && dist[j] > graph[minIdx][j]) {
          dist[j] = graph[minIdx][j];
        }
      }
    }
    return sum;
  }

  public static void main(String[] args) {
    System.out.println("hello world!");
  }
}
```

---

## 6. 举个容易理解的例子

**图示**：（节点 A=0,B=1,C=2,D=3；权重标在边上）

```
  A
 / \
1   2
/     \
B —3— C
 \     /
  4   5
    D
```

* **邻接表堆版**：

  * 从 A 解锁 {A→B(1),A→C(2)}
  * 取最小 A→B(1)，加入 MST，解锁 B→C(3),B→D(4)
  * 堆内 {A→C(2), B→C(3),B→D(4)}，取 A→C(2)，…
  * 最终边集 {A→B, A→C, B→D, C→D}。
* **矩阵版**：

  * `dist[]` 初始化为 A→所有距离；
  * 重复 3 次：每次选最小 `dist[j]`，更新总和并刷新其到其它节点的距离。

---

## 7. 可用来处理的经典题目

* **最小生成树**：Kruskal vs Prim 对比
* **网络设计**：最小成本连接所有交换机/路由器
* **聚类分析**：单链接聚类（与 MST 等价）
* **约束最小化**：电网、路网、管网最优设计

---

## 8. 知识点提取与记忆法

1. **Prim 堆版口诀**：

   ```
   解锁起点所有边 → 弹最小边 → 若目标未选，选它并解锁新节点出边 → 重复
   ```
2. **多分量支持**：外层遍历所有节点，保证森林也可处理。
3. **矩阵版口诀**：

   ```
   标记 0 入 MST → dist[i]=0→i → 选最小 dist → 加入 MST → 更新 dist
   ```
4. **复杂度记忆**：

   * 堆版 $O(E\log E)$；
   * 矩阵版 $O(V^2)$。
5. **防环**：判断目标节点是否已被访问。

---

## 9. 严格基于原始代码

以上所有内容，包括分析思路、完整注释、示例与记忆方法，都 **严格对应** 你提供的 `class16.Code05_Prim` 原始实现，未作任何改动或简化。希望这份深入解析帮助你全面掌握 Prim 算法！
