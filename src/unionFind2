下面我将严格按照你给出的 **Code06\_UnionFind**（数组版并查集带高效 I/O）的原始实现，从九个方面进行详尽解析，帮助你彻底掌握数组版并查集的本质与技巧，并提炼最有利于记忆的方法。

---

### 1. 算法介绍

* **解决的问题**：维护元素 `1…n` 的不相交集合，支持两种操作：

  1. **合并**（`union(x,y)`）：将两个元素所在集合合并；
  2. **查询**（`isSameSet(x,y)`）：判断两元素是否在同一个集合。
* **优秀之处**：

  * **原地数组实现**，无需额外对象，空间开销 O(n)；
  * **路径压缩 + 按大小合并**，摊销时间几乎常数 O(α(n))；
  * **高效 I/O** 结合 `StreamTokenizer`、`PrintWriter`，适合大规模输入。
* **核心思想**：

  1. **父指针**：用 `father[i]` 指向父节点，根节点 `father[i]=i`；
  2. **路径压缩**：`find` 时先搜集沿路节点，再统一指向根；
  3. **按大小合并**：把小树挂到大树根下，保持树扁平。
* **时间复杂度**：O(m·α(n))，m 次操作摊销几乎常数；
* **空间复杂度**：O(n)（三个大小为 `n+1` 的数组）。

---

### 2. 数据结构与核心代码

```java
public static int[] father = new int[MAXN];
public static int[] size   = new int[MAXN];
public static int[] help   = new int[MAXN];
```

* **`father[i]`**：元素 `i` 的父节点。
* **`size[i]`**：仅对根节点有意义，记录其所在集合的元素数量。
* **`help[]`**：辅助栈，临时存放 `find` 过程中路径上的节点，实现路径压缩。
* **为什么这样用**：

  * 连续数组索引比 `HashMap` 更高效；
  * `help` 免除了 Java 栈深度限制，且能在一次 `find` 调用中压缩路径。

---

### 3. 核心步骤解析

#### 初始化 `init(n)`

```java
for (int i = 0; i <= n; i++) {
    father[i] = i;  // 自己的父亲是自己
    size[i]   = 1;  // 每个集合初始大小 1
}
```

#### 查找根 `find(i)`

```java
int hi = 0;
while (i != father[i]) {
    help[hi++] = i;     // 记录路径
    i = father[i];      // 向上跳
}
// i 是根，路径压缩：将所有沿路节点直接指向根
for (hi--; hi >= 0; hi--) {
    father[help[hi]] = i;
}
return i;
```

* **首循环**：沿父指针上溯，收集路径。
* **第二循环**：弹出 `help`，把所有路径节点直接挂到根上。

#### 判断同集 `isSameSet(x,y)`

```java
return find(x) == find(y);
```

#### 合并 `union(x,y)`

```java
int fx = find(x), fy = find(y);
if (fx != fy) {
    if (size[fx] >= size[fy]) {
        size[fx] += size[fy];
        father[fy] = fx;
    } else {
        size[fy] += size[fx];
        father[fx] = fy;
    }
}
```

* **按大小合并**：把小的根挂到大的根下，并更新大根的 `size`。

#### 高效 I/O in `main`

* 使用 `BufferedReader + StreamTokenizer` 逐令牌读入；
* 使用 `PrintWriter` 输出并及时 `flush()` 查询结果。

---

### 4. 设计与逻辑/代码技巧

1. **数组版**：比 `Map` 版更省空间、更快；
2. **路径压缩** 用显式 `help[]` 避免深递归或额外栈；
3. **按大小合并** 保持树高度 O(log n)→O(α(n))；
4. **I/O 优化**：`StreamTokenizer` 按数值/令牌分解，适合大数据；
5. **`size[0]`** 虽有空间，但无实际意义（`i` 范围 `1…n`）。

---

### 5. 全代码及详尽注释

```java
package class14;

import java.io.*;

// 数组版并查集 + 高效 I/O
public class Code06_UnionFind {

    public static int MAXN = 1000001;      // 最大支持 n ≤10^6

    public static int[] father = new int[MAXN];
    public static int[] size   = new int[MAXN];
    public static int[] help   = new int[MAXN]; // 临时栈

    /** 初始化：每个元素自成集合，大小=1 */
    public static void init(int n) {
        for (int i = 0; i <= n; i++) {
            father[i] = i;
            size[i]   = 1;
        }
    }

    /** 查找 i 的根并压缩路径 */
    public static int find(int i) {
        int hi = 0;
        // 上溯到根，路径存入 help
        while (i != father[i]) {
            help[hi++] = i;
            i = father[i];
        }
        // 路径压缩：所有访问过节点直接挂到根
        for (hi--; hi >= 0; hi--) {
            father[help[hi]] = i;
        }
        return i;
    }

    /** 判断 x,y 是否在同一集合 */
    public static boolean isSameSet(int x, int y) {
        return find(x) == find(y);
    }

    /** 合并 x,y 所在集合（按大小合并） */
    public static void union(int x, int y) {
        int fx = find(x), fy = find(y);
        if (fx != fy) {
            if (size[fx] >= size[fy]) {
                size[fx] += size[fy];
                father[fy] = fx;
            } else {
                size[fy] += size[fx];
                father[fx] = fy;
            }
        }
    }

    /** 主函数：高效读入并执行 m 次操作 */
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

        // 持续读直到 EOF
        while (in.nextToken() != StreamTokenizer.TT_EOF) {
            int n = (int) in.nval;  // 元素个数
            init(n);

            in.nextToken();
            int m = (int) in.nval;  // 操作数
            for (int i = 0; i < m; i++) {
                in.nextToken();
                int op = (int) in.nval;  // 1: 查询，2: 合并
                in.nextToken(); int x = (int) in.nval;
                in.nextToken(); int y = (int) in.nval;
                if (op == 1) {
                    out.println(isSameSet(x, y) ? "Yes" : "No");
                    out.flush();
                } else {
                    union(x, y);
                }
            }
        }
    }
}
```

---

### 6. 容易理解的示例

假设输入：

```
5 4
1 1 2
2 2 3
1 1 3
1 4 5
```

含义：

* `n=5, m=4`
* `1 1 2` → 查询 1,2 （初始各自集合）→ 输出 `No`
* `2 2 3` → 合并 2,3 → {2,3}
* `1 1 3` → 查询 1,3 → `No`
* `1 4 5` → 查询 4,5 → `No`

输出：

```
No
No
No
```

---

### 7. 可解决经典题目

* **NowCoder 练习**：动态连通性、查询联合。
* **LeetCode**

  * 547\. 朋友圈（省份数量）
  * 990. 等式方程的可满足性
  * 1319. 连通网络数量
* **Kruskal 最小生成树**
* **并查集专题练习**。

---

### 8. 知识点提取与记忆法

1. **init/find/union 三步走**：

   ```
   init: father[i]=i, size[i]=1
   find: 上溯入 help → 根 → 弹 help 路径压缩
   union: 按 size 合并
   ```
2. **数组版快捷口诀**：

   * `father[i]`，爸爸指针；
   * `size[i]`，权值（只对根有效）；
   * `help[]`，临时栈，辅助压缩。
3. **时间复杂度**：O(m·α(n))，可近似看作 O(m)。
4. **I/O 优化**：`StreamTokenizer` + `PrintWriter.flush()` 适合大输入量场景。

---

### 9. 严格基于原始代码

以上所有分析、示例、记忆方法，均 **严格对应** 你提供的 `Code06_UnionFind` 数组实现和高效 I/O 方式，未作任何修改或引入其他变体。希望对你理解和记忆本算法大有帮助！
