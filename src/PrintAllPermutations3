下面我将对 **`permutation3`**（带重复字符去重的原地交换法）进行完整的九步解析。

---

## 1. 算法介绍

* **解决的问题**
  在含有**重复字符**的字符串中，枚举其 **所有不重复的排列**。
* **优秀之处**

  * **原地交换**：直接在 `char[]` 上交换，空间开销小；
  * **去重逻辑**：在每层递归中用 `visited` 数组防止对相同字符重复“固定”到同一位置，避免产生重复排列；
* **核心思想**

  1. 将字符串转为 `char[] str`；
  2. 对每个位置 `index`，用一个 `visited[256]` 标记本层已经“用过”的字符；
  3. 遍历 `i=index…N-1`，若 `str[i]` 未被本层访问：

     * 标记 `visited[str[i]] = true`；
     * 交换 `swap(str,index,i)`，递归 `index+1`；
     * 回溯交换回来；
  4. 递归出口 `index==N` 时收集当前排列。
* **时间复杂度**
  最坏仍为 $O(N!\times N)$，但由于去重实际生成数量小于 $N!$。
* **空间复杂度**
  递归栈 $O(N)$ + 结果 $O(\text{实际排列数}\times N)$。

---

## 2. 数据结构与相应代码

```java
char[] str = s.toCharArray();    // 原地交换的字符数组
boolean[] visited = new boolean[256]; // 本层已固定的字符标记
List<String> ans = new ArrayList<>(); // 收集去重后所有排列
```

* **`str`**：在同一个数组上通过交换生成不同排列；
* **`visited`**：大小 256，覆盖所有可能的 `char`，每层递归重置，用于 **同层去重**；
* **`ans`**：最终收集无重复的排列。

---

## 3. 核心步骤代码解析

```java
public static void g2(char[] str, int index, List<String> ans) {
    if (index == str.length) {
        ans.add(String.valueOf(str));  // 收集当前完整排列
    } else {
        boolean[] visited = new boolean[256];
        for (int i = index; i < str.length; i++) {
            char c = str[i];
            if (!visited[c]) {             // 本层未用过该字符
                visited[c] = true;         // 标记已用
                swap(str, index, i);       // 将 c 放到前缀位置
                g2(str, index + 1, ans);   // 递归排列后缀
                swap(str, index, i);       // 回溯
            }
        }
    }
}
```

* **`visited` 数组**：防止在同一 `index` 层对相同字符多次交换；
* **循环 `i=index…N-1`**：尝试把每个可能字符放到前缀末尾；
* **交换+回溯**：保证在离开该分支后数组恢复。

---

## 4. 设计或代码技巧

1. **同层去重**：`visited[c]` 只在当前 `index` 层标记，确保相同字符只第一次被交换到 `index`，避免重复路径；
2. **原地操作**：无需额外列表或 `HashSet` 存各分支结果，只在 `ans` 中去重；
3. **轻量 `boolean[256]`**：尽管占 256 大小，但每层只用一次，常量空间；
4. **回溯结构**：经典“固定—递归—恢复”流程，一目了然。

---

## 5. 完整代码及详尽注释

```java
package class17;

import java.util.ArrayList;
import java.util.List;

public class Code04_PrintAllPermutations {

    /**
     * 原地交换法枚举不重复排列（可处理重复字符）
     */
    public static List<String> permutation3(String s) {
        List<String> ans = new ArrayList<>();
        if (s == null || s.isEmpty()) {
            return ans;
        }
        char[] str = s.toCharArray();
        g2(str, 0, ans);
        return ans;
    }

    /**
     * @param str   原地排列的字符数组
     * @param index 当前固定前缀长度
     * @param ans   收集所有不重复排列
     */
    private static void g2(char[] str, int index, List<String> ans) {
        int N = str.length;
        if (index == N) {
            ans.add(String.valueOf(str));  // 完整排列
        } else {
            // 本层去重标记
            boolean[] visited = new boolean[256];
            // 对后缀位置 i 进行交换
            for (int i = index; i < N; i++) {
                char c = str[i];
                if (!visited[c]) {
                    visited[c] = true;       // 本层首次使用 c
                    swap(str, index, i);     // 把 c 放到前缀末尾
                    g2(str, index + 1, ans); // 递归排列后缀
                    swap(str, index, i);     // 回溯
                }
            }
        }
    }

    /** 交换数组中两字符 */
    private static void swap(char[] chs, int i, int j) {
        char tmp = chs[i];
        chs[i] = chs[j];
        chs[j] = tmp;
    }

    // （可选）测试示例
    public static void main(String[] args) {
        List<String> perms = permutation3("acc");
        // 应输出： acc, cac, cca （任意顺序）
        for (String p : perms) {
            System.out.println(p);
        }
    }
}
```

---

## 6. 容易理解的例子

输入 `"aba"`：

* **全排列**（含重复）会生成 `["aba","aab","baa","baa","aab","aba"]`
* **去重后**仅 `["aba","aab","baa"]`

`permutation3` 在 `index=0` 层只会选第一个 `'a'` 及后面的 `'b'`，不会对第二个 `'a'` 重复选，从而过滤掉重复路径。

---

## 7. 可处理的经典题目

* **全排列 II**：LeetCode 47. Permutations II
* **数组含重复元素的全排列**
* **带约束的字符串重组**：如“第 K 个排列”在去重基础上可扩展

---

## 8. 知识点提取与记忆法

* **回溯模板**：

  ```
  perm(str,index):
    if index==N: collect(str)
    visited = new boolean[256]
    for i in [index..N-1]:
      if not visited[str[i]]:
        visited[str[i]] = true
        swap(str,index,i)
        perm(str,index+1)
        swap(str,index,i)
  ```
* **四字口诀**：

  > **“层去重、原地换”**
* **去重时机**：只在同一递归层使用 `visited`，下一层重新初始化。

---

## 9. 严格按照原始代码

以上所有分析、示例与记忆方法，均 **严格对应** 你提供的 `permutation3` 源码实现，无任何改动或简化。至此，三种 `permutation` 方法的九步解析均已完成！
