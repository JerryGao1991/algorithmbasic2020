好的，下面我将对 **`permutation2`**（原地交换法枚举全排列）进行完整的九步解析。

---

## 1. 算法介绍

* **解决的问题**
  枚举字符串 `s` 的所有排列（含重复字符会产生重复排列）。
* **优秀之处**

  * **原地交换**：直接在字符数组上交换，不额外开辟列表或字符串，空间利用更优；
  * **递归深度为 N**：易于理解的“固定前缀 → 递归后缀”分治思路。
* **核心思想**

  1. 将待排列的字符放入 `char[] str`；
  2. 从位置 `index` 开始依次试将 `str[i]`（`i=index…N-1`）放到当前位置，通过 `swap(str,index,i)`；
  3. 递归处理 `index+1…N-1` 的排列；
  4. 回溯时再交换回来，恢复数组。
* **时间复杂度**
  同样为 $O(N!\times N)$，每次生成完整排列要 `String.valueOf(str)` 复制成本 $O(N)$。
* **空间复杂度**
  递归栈 $O(N)$ + 结果 $O(N!\times N)$。

---

## 2. 数据结构与相应代码

```java
char[] str = s.toCharArray();    // 原地操作的字符数组
int index;                       // 当前固定前缀长度
List<String> ans = new ArrayList<>(); // 收集结果
```

* **`str`**：直接在数组上交换，避免额外列表维护；
* **`index`**：表示目前已固定排列的前缀长度，`0…index-1` 已排列确定；
* **`ans`**：最终收集所有 `String.valueOf(str)`。

---

## 3. 核心步骤代码解析

```java
public static void g1(char[] str, int index, List<String> ans) {
  if (index == str.length) {
    ans.add(String.valueOf(str));  // 完整排列
  } else {
    for (int i = index; i < str.length; i++) {
      swap(str, index, i);          // 把 str[i] 放到前缀末尾
      g1(str, index + 1, ans);      // 递归排列后缀
      swap(str, index, i);          // 恢复
    }
  }
}
```

* **递归出口**：`index==N` 时，前缀已含全部字符，直接收集当前 `str` 整串；
* **循环 `i=index…N-1`**：每个位置的字符都可放到 `index` 处，枚举所有选择；
* **回溯**：完成子问题后恢复交换，让下一次循环以原数组顺序开始。

---

## 4. 设计或代码技巧

1. **原地交换**

   * 省去 `List` 的 `remove/add`，直接 `swap` 后再 `swap` 回；
2. **前缀—后缀分治**

   * 先“固定”一个字符到前缀，再递归排列后缀；
3. **收集顺序**

   * 结果按照递归“先深后浅、左优先”顺序排列；
4. **String.valueOf**

   * 一次性从 `char[]` 生成字符串，避免多次拼接。

---

## 5. 完整代码及详尽注释

```java
package class17;

import java.util.ArrayList;
import java.util.List;

public class Code04_PrintAllPermutations {

    /**
     * 原地交换法枚举所有排列（含重复）
     */
    public static List<String> permutation2(String s) {
        List<String> ans = new ArrayList<>();
        if (s == null || s.isEmpty()) {
            return ans;
        }
        char[] str = s.toCharArray();
        g1(str, 0, ans);
        return ans;
    }

    /**
     * @param str   待排列的字符数组
     * @param index 当前固定前缀长度，下标从 0 开始
     * @param ans   收集所有排列结果
     */
    private static void g1(char[] str, int index, List<String> ans) {
        int N = str.length;
        if (index == N) {
            // 前缀长度达到 N，收集一条完整排列
            ans.add(String.valueOf(str));
        } else {
            // 把每个位置 i 的字符放到 index 处，递归排列后缀
            for (int i = index; i < N; i++) {
                swap(str, index, i);
                g1(str, index + 1, ans);
                swap(str, index, i); // 回溯，恢复原状
            }
        }
    }

    /** 交换数组中两个位置的字符 */
    private static void swap(char[] chs, int i, int j) {
        char tmp = chs[i];
        chs[i] = chs[j];
        chs[j] = tmp;
    }
}
```

---

## 6. 举例说明

以 `"abc"` 为例，递归流程：

1. `index=0`，循环 `i=0..2`：

   * `i=0`：swap(0,0) → `abc` → 递归 `index=1`

     * `i=1`：swap(1,1) → `abc` → `index=2`

       * `i=2`：swap(2,2) → `abc` → 收集 `"abc"`
     * 回溯 → `abc`
     * `i=2`：swap(1,2) → `acb` → `index=2` → 收集 `"acb"` → 回溯 → `abc`
   * 回溯 `index=0` → `abc`
   * `i=1`：swap(0,1) → `bac` → 类似生成 `"bac","bca"`
   * `i=2`：swap(0,2) → `cba` → 生成 `"cba","cab"`

结果顺序：

```
"abc","acb","bac","bca","cba","cab"
```

---

## 7. 适用的经典题目

* **全排列 I**：LeetCode 46
* **数组或列表全排列**：给定整数数组返回其所有排列
* **回溯基础模板**：原地修改＋恢复模式通用

---

## 8. 知识点提取与记忆法

* **框架模板**：

  ```
  perm(str, index):
    if index==N: collect(str)
    for i in [index..N-1]:
      swap(str,index,i)
      perm(str,index+1)
      swap(str,index,i)
  ```
* **三字口诀**：

  > **“固定→递归→恢复”**
* **时间量级**：$N!$ 条分支，每条 $O(N)$ 复制 ⇒ $O(N!\times N)$。

---

## 9. 严格按照原始代码

以上内容，包括思路、注释、示例与记忆方法，都 **严格对应** 你的 `permutation2` 实现，无任何改动。如需继续对 `permutation3` 进行同样的九步解析，请告诉我！
