下面我将严格按照你提供的 **class08.Code01\_Trie** 实现，分九步进行深入解析，帮助你全面理解前缀树（Trie）及其代码细节，并提炼高效记忆方法。

---

## 1. 算法介绍

* **解决的问题**：维护一组字符串，支持以下操作：

  1. `insert(word)`：插入单词；
  2. `erase(word)`：删除已插入的单词一次；
  3. `countWordsEqualTo(word)`：查询与给定单词完全相同的数量；
  4. `countWordsStartingWith(pre)`：查询以给定前缀开头的单词数量。
* **优秀之处**：

  * **前缀共享**：公共前缀只存储一次，节省空间；
  * **时间复杂度**：每次操作均为 O(L)，L=单词长度，不依赖于词典总规模。
* **核心思想**：使用一棵 26 叉树，每层对应一个字符位置，节点记录经过次数 (`pass`) 和结束次数 (`end`)。
* **空间复杂度**：最坏 O(ΣL)，ΣL 为所有插入单词长度之和。

---

## 2. 用到的数据结构及代码

```java
class Node {
    public int pass;      // 有多少单词经过此节点
    public int end;       // 有多少单词以此节点结尾
    public Node[] nexts;  // 指向下一级 26 条边
    public Node() {
        pass = 0; end = 0;
        nexts = new Node[26];
    }
}
private Node root;        // 前缀树根节点（不存字符）
```

* **为什么这样用**：

  * `pass` 快速统计前缀出现次数，支持 `countWordsStartingWith`；
  * `end` 统计完全匹配次数，支持 `countWordsEqualTo`；
  * `nexts[26]` 固定大小数组，快速根据 `ch - 'a'` 索引分支。

---

## 3. 核心步骤代码解析

### 插入 `insert(String word)`

```java
node = root; node.pass++;
for (char c: word) {
    int path = c - 'a';
    if (node.nexts[path] == null) node.nexts[path] = new Node();
    node = node.nexts[path];
    node.pass++;
}
node.end++;
```

* **流程**：

  1. 根节点 `pass++`；
  2. 逐字符走到或创建子节点，对应节点 `pass++`；
  3. 末端节点 `end++`。

### 删除 `erase(String word)`

```java
if (countWordsEqualTo(word)==0) return;
node = root; node.pass--;
for (char c: word) {
    int path = c - 'a';
    if (--node.nexts[path].pass == 0) {
        node.nexts[path] = null;
        return;
    }
    node = node.nexts[path];
}
node.end--;
```

* **思路**：先检查是否存在；沿路径 `pass--`；如果某子节点 `pass` 减到 0，可直接断开该子树，提前 return。

### 查询完全匹配 `countWordsEqualTo(String word)`

```java
node = root;
for (char c: word) {
    int idx = c - 'a';
    if (node.nexts[idx]==null) return 0;
    node = node.nexts[idx];
}
return node.end;
```

* **思路**：沿路径走到底，看 `end`。

### 查询前缀匹配 `countWordsStartingWith(String pre)`

```java
node = root;
for (char c: pre) {
    int idx = c - 'a';
    if (node.nexts[idx]==null) return 0;
    node = node.nexts[idx];
}
return node.pass;
```

* **思路**：同上，但看 `pass`。

---

## 4. 精妙设计或代码技巧

1. **`pass` vs `end` 计数**：双计数精确区分前缀与完整词。
2. **懒删除**：`erase` 中一旦 `pass` 变 0，直接 `nexts[path]=null` 剪掉整条子链，节省后续遍历和空间。
3. **固定数组分支**：比 `Map<Character,Node>` 更省时省空间，适合字母表小且固定场景。
4. **提前返回**：`erase` 在剪枝后直接 `return`，无需处理剩余路径。

---

## 5. 全代码及详尽注释

```java
package class08;

public class Code01_Trie {

    // LeetCode 测试链接: https://leetcode.cn/problems/implement-trie-ii-prefix-tree/
    class Trie {

        // 前缀树节点
        class Node {
            public int pass;       // 经过此节点的单词数量
            public int end;        // 在此节点结束的单词数量
            public Node[] nexts;   // 指向下一级 26 条边
            public Node() {
                pass = 0; end = 0;
                nexts = new Node[26];
            }
        }

        private Node root;       // 树根，不对应任何字符

        public Trie() {
            root = new Node();    // 初始化根节点
        }

        // 插入单词
        public void insert(String word) {
            if (word == null) return;
            char[] str = word.toCharArray();
            Node node = root;
            node.pass++;          // 根节点经过计数
            for (int i = 0; i < str.length; i++) {
                int path = str[i] - 'a';      // 计算分支下标
                if (node.nexts[path] == null) {
                    node.nexts[path] = new Node();
                }
                node = node.nexts[path];      // 进入子节点
                node.pass++;                  // 子节点经过计数
            }
            node.end++;           // 单词末端计数
        }

        // 删除单词（只删一次）
        public void erase(String word) {
            if (countWordsEqualTo(word) == 0) {
                return;           // 单词不存在，无需删除
            }
            char[] chs = word.toCharArray();
            Node node = root;
            node.pass--;          // 根节点经过计数--
            for (int i = 0; i < chs.length; i++) {
                int path = chs[i] - 'a';
                // 子节点经过计数--，若变 0，剪枝并结束
                if (--node.nexts[path].pass == 0) {
                    node.nexts[path] = null;
                    return;
                }
                node = node.nexts[path];
            }
            node.end--;           // 末端计数--
        }

        // 完全匹配查询
        public int countWordsEqualTo(String word) {
            if (word == null) return 0;
            char[] chs = word.toCharArray();
            Node node = root;
            for (int i = 0; i < chs.length; i++) {
                int idx = chs[i] - 'a';
                if (node.nexts[idx] == null) {
                    return 0;     // 路径断开，返回 0
                }
                node = node.nexts[idx];
            }
            return node.end;
        }

        // 前缀匹配查询
        public int countWordsStartingWith(String pre) {
            if (pre == null) return 0;
            char[] chs = pre.toCharArray();
            Node node = root;
            for (int i = 0; i < chs.length; i++) {
                int idx = chs[i] - 'a';
                if (node.nexts[idx] == null) {
                    return 0;
                }
                node = node.nexts[idx];
            }
            return node.pass;
        }
    }

}
```

---

## 6. 易懂示例演示

```java
Trie trie = new Trie();
trie.insert("apple");
trie.insert("app");
trie.insert("apple");
System.out.println(trie.countWordsEqualTo("apple"));      // 2
System.out.println(trie.countWordsEqualTo("app"));        // 1
System.out.println(trie.countWordsStartingWith("app"));   // 3
trie.erase("apple");
System.out.println(trie.countWordsEqualTo("apple"));      // 1
System.out.println(trie.countWordsStartingWith("app"));   // 2
```

* **解析**：

  * 插入两次 `"apple"`，`end("apple")=2`；
  * 插入一次 `"app"`，`pass("app")=3`；
  * 删除一次 `"apple"` 后对应计数各减 1。

---

## 7. 适用的经典题目

* **LeetCode 208／II**：实现 Trie（前缀树）。
* **LeetCode 212**：单词搜索 II（多词匹配＋Trie 剪枝）。
* **LeetCode 820**：单词拆分（快速前缀判断）。
* **LeetCode 676**：实现一个支持通配符 `'.'` 的字典（可在 `nexts` 循环遍历）。

---

## 8. 知识点提取与记忆法

1. **节点两计数**：

   * `pass`：路过次数＝前缀数量；
   * `end`：结束次数＝完全匹配数量。
2. **路径索引**：`path = ch - 'a'` → 下一条边的数组下标。
3. **操作套路**：

   ```
   insert：root.pass++ → 遍历→节点.pass++ → 末端.end++
   erase ：先查→root.pass-- → 遍历→节点.pass-- → 若0剪枝 → 末端.end--
   queryEqual：遍历到末端→返回.end
   queryPre：遍历到末端→返回.pass
   ```
4. **懒删除技巧**：`pass` 变 0 时直接 `nexts[path]=null`，剪掉整条分支。
5. **时间复杂度 O(L)**：按字符长度走固定深度。

---

## 9. 严格基于原代码

以上解析、示例和记忆方法，均严格针对你提供的 `class08.Code01_Trie` 实现，未做其他变体。如需更深入讨论某行或其他特性，随时告诉我！
